//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.6

use sea_orm::entity::prelude::*;
use sea_orm::LinkDef;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "menu"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub path: Option<String>,
    pub name: String,
    pub component: Option<String>,
    pub is_visible: bool,
    pub status: i32,
    pub keep_alive: bool,
    pub order: i32,
    pub p_id: Option<i32>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Path,
    Name,
    Component,
    IsVisible,
    Status,
    KeepAlive,
    Order,
    PId,
    CreatedAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    SelfReferencing,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Path => ColumnType::String(StringLen::None).def().null().unique(),
            Self::Name => ColumnType::String(StringLen::None).def().unique(),
            Self::Component => ColumnType::String(StringLen::None).def().null(),
            Self::IsVisible => ColumnType::Boolean.def(),
            Self::Status => ColumnType::Integer.def(),
            Self::KeepAlive => ColumnType::Boolean.def(),
            Self::Order => ColumnType::Integer.def(),
            Self::PId => ColumnType::Integer.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::SelfReferencing => Entity::belongs_to(Entity)
                .from(Column::PId)
                .to(Column::Id)
                .into(),
        }
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        super::role_mtm_menu::Relation::Role.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::role_mtm_menu::Relation::Menu.def().rev())
    }
}

pub struct SelfReferencingLink;

impl Linked for SelfReferencingLink {
    type FromEntity = Entity;
    type ToEntity = Entity;
    fn link(&self) -> Vec<LinkDef> {
        vec![Relation::SelfReferencing.def()]
    }
}

impl ActiveModelBehavior for ActiveModel {}
